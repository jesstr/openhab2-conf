import org.joda.time.*

// Global Variables
var String CronParam = "0 0 * ? * *"

rule "Initial state"
	when
		System started
	then
		Water.postUpdate(0)
		// Duration_1.postUpdate(10)
		// Duration_2.postUpdate(10)
		// Duration_3.postUpdate(10)
		// Duration_4.postUpdate(10)
		// Duration_Pump_1.postUpdate(10)
		// Duration_Pump_2.postUpdate(10)
		// Duration_Pump_3.postUpdate(10)
end

rule "Water all"
	when
		Time cron "0 * * ? * *"
	then
		var Number hour = (WateringHour.state as DecimalType).intValue
		var Number minute = (WateringMinute.state as DecimalType).intValue

		if (now.getHourOfDay == hour && now.getMinuteOfHour == minute) {
			logInfo( "INFO", "It's time to water plants" )
		
			//group 1
			Water.sendCommand(1)
			Thread::sleep(((Duration_1.state as DecimalType).floatValue * 1000).intValue)

			//group 2
			Water.sendCommand(2)
			Thread::sleep(((Duration_2.state as DecimalType).floatValue * 1000).intValue)
			
			//group 3
			Water.sendCommand(3)
			Thread::sleep(((Duration_3.state as DecimalType).floatValue * 1000).intValue)

			//group 4
			Water.sendCommand(4)
			Thread::sleep(((Duration_4.state as DecimalType).floatValue * 1000).intValue)

			Water.sendCommand(0)

			LastWatered.postUpdate(new DateTimeType())

			logInfo( "INFO", "Watering finished" )
		}
end

rule " Water group_1"
when
        Item Water changed to 1
then
	Thread::sleep(((Duration_1.state as DecimalType).floatValue * 1000).intValue + 1000)
	if (Water.state == 1) {
		Water.sendCommand(0)
        }
end

rule " Water group_2"
when
        Item Water changed to 2
then
	Thread::sleep(((Duration_2.state as DecimalType).floatValue * 1000).intValue + 1000)
	if (Water.state == 2) {
		Water.sendCommand(0)
        }
end

rule "Water group_3"
when
        Item Water changed to 3
then
	Thread::sleep(((Duration_3.state as DecimalType).floatValue * 1000).intValue + 1000)
	if (Water.state == 3) {
		Water.sendCommand(0)
        }
end

rule "Water group_4"
when
        Item Water changed to 4
then
	Thread::sleep(((Duration_4.state as DecimalType).floatValue * 1000).intValue + 1000)
	if (Water.state == 4) {
		Water.sendCommand(0)
        }
end



rule "Group_1 timestamp"
when
        Item Water changed to 1
then
        Timestamp_1.postUpdate(new DateTimeType())
end

rule "Group_2 timestamp"
when
        Item Water changed to 2
then
        Timestamp_2.postUpdate(new DateTimeType())
end

rule "Group_3 timestamp"
when
        Item Water changed to 3
then
        Timestamp_3.postUpdate(new DateTimeType())
end

rule "Group_4 timestamp"
when
        Item Water changed to 4
then
        Timestamp_4.postUpdate(new DateTimeType())
end


// rule "Any group timestamp"
// when
//         Item Water changed to 1 or
// 	Item Water changed to 2 or
// 	Item Water changed to 3 or
// 	Item Water changed to 4
// then
//         LastWatered.postUpdate(new DateTimeType())
// end
